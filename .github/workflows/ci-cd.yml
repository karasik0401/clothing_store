name: CI/CD pipline

on:
  push:
    branches: ["main"]
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Prepare tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./cart/requirements.txt
          
          sudo docker run -d -P -e POSTGRES_PASSWORD=password -p 5432:5432 --name postgres-db postgres:14
          echo "POSTGRES_URL=$POSTGRES_URL" > .env
          sleep 5
        env:
          POSTGRES_URL: postgresql://postgres:password@localhost:5432/postgres
      
      - name: Prepare unit tests for cart
        run: |
          sleep 5
          cd cart
          alembic upgrade head

      - name: Run unit tests for cart
        run: |
          cd cart
          python -m pytest ./tests/unit

      - name: Prepare integration tests for cart
        run: |
          sudo docker exec -i postgres-db psql -U postgres -c "\c postgres;" -c "drop table cart, alembic_version;" -c "drop type titlecategories;"
          sleep 5
          cd db_title_app
          alembic upgrade head

      - name: Run integration tests for cart
        run: |
          cd cart
          python -m pytest ./tests/integration

      - name: Prepare tests for item
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r ./item/requirements.txt

      - name: Run unit tests for api_title_app
        run: |
          cd item
          python -m pytest ./tests/unit 
  
  build-and-push-to-dh:
      name: Build and push to DockerHub
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Build docker promo_app image
          run: |
            docker build ./item -f ./item/Dockerfile --tag karasik0401/clothing_store-item:latest
  
        - name: Login to DockerHub
          uses: docker/login-action@v3.0.0
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
  
  
        - name: Build and push promo_app service image
          run: |
            docker push ${{ secrets.DOCKER_USERNAME }}/clothing_store-item:latest
  build-and-push-to-yc:
    name: Build and push to YaCloud Registry
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
    
      - name: Build docker image
        run: |
          docker build ./cart -f ./cart/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/clothing_store-cart:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push tag YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/clothing_store-cart:latest
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push-to-yc]
    steps:
    - name: Deploy serverless container
      uses: yc-actions/yc-sls-container-deploy@v1
      with:
        yc-sa-json-credentials: ${{ secrets.YC_KEYS }}
        container-name: ${{ secrets.YC_CONTAINER_NAME }}
        folder-id: ${{ secrets.YC_FOLDER_ID }}
        revision-image-url: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/clothing_store-cart:latest
        revision-service-account-id: ${{ secrets.YC_SA_ID }}
        revision-env: |
          AMQP_URL=${{ secrets.ENV_AMQP_URL }}
          POSTGRES_URL=${{ secrets.ENV_POSTGRES_URL }}
